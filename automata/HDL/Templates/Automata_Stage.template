{% from 'Automata.template' import automata_macro %}
{% import 'STE_base.template' as ste_base %}

{#
@param automatas: List of automatas to be processed
@param summary_str: summary string to be paste on top of the file
@param single_out: True/False if True, the circuit willl have only one input which is the OR of all the outputs
@param bram_list: a 2d list . the first dimension is the list of brams and in each list, there are
list of tuples(atm.id, node.id) to track the assigned
@param bram_match_id_list: this is a list of nodes that the matching will be in a block ram
@stage_index
#}

/*
{{summary_str}}
*/

module Automata_Stage{{stage_index}}(input clk,
                    input run,
                    input reset,
                    input [{{automatas[0].stride_value * 8 -1}} : 0] top_symbols
                    {%- if single_out == false %}
                    {%- for atm in automatas -%}
                    {%- for node in atm.nodes if node.report %}
                    , output {{atm.id}}_w_out_{{node.id}}
                    {%-endfor%}
                    {%endfor%}
                    {%-else-%}
                    ,output single_out
                    {%-endif-%},
                    output wire[{{automatas[0].stride_value * 8 -1}} : 0] out_symbols,
                    output wire out_reset
                    );

reg [{{automatas[0].stride_value * 8 -1}}:0] symbols;
reg captured_reset;


always @(posedge clk)
begin
    if (run == 1)
        symbols <= top_symbols;
        captured_reset <= reset;
end

assign out_symbols = symbols;
assign out_reset = captured_reset;

{%- if single_out -%}
{%set report_list=[]%}
{%for atm in automatas%}
{%-for node in atm.nodes if node.report-%}
{% do report_list.append(atm.id|string+'_w_out_'+node.id|string)%}
wire {{atm.id}}_w_out_{{node.id}};

{%- endfor -%}
{%- endfor -%}

{# wire {{report_list|join(', ')}}; #}
assign single_out = {{report_list|join(' | ')}};

{%endif%}

{% for bram in bram_list %}
{% for atm, node in bram %}
wire {{atm.id}}_w_match_{{node.id}};
{%- endfor %}
bram_module_{{loop.index0}} bram_module_{{loop.index0}}_ins (
    .clk(clk),
    .symbols(symbols),
    .match({ {% for atm, node in bram%}{% if loop.index0 > 0 %}, {% endif %} {{atm.id}}_w_match_{{node.id}}
    {% endfor %} })
                                  );
{% endfor %}


{%for atm in  automatas%}
Automata_{{atm.id}} automata_{{atm.id}} (.clk(clk),
                     .run(run),
                     .reset(captured_reset),
                     .symbols(symbols)
                     {%- for node_id in bram_match_id_list[loop.index0]%}
                     , .{{atm.id}}_w_match_{{node_id}}({{atm.id}}_w_match_{{node_id}})
                     {%- endfor %}
                     {%- for node in atm.nodes if node.report %}
                      , .{{atm.id}}_w_out_{{node.id}}({{atm.id}}_w_out_{{node.id}})
                     {%- endfor %}
                    );
{%endfor%}


endmodule

