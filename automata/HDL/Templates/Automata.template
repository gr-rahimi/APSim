{% import 'LUT_match.template' as lut_match %}

{% macro automata_macro(automata, before_match_reg, after_match_reg, bit_feed_size, lut_bram_dic ) -%}

{#
@param automata : under process automata
@param before_match_reg : True/False if True, puts a register exactly after the input
@param after_match_reg : True/False if True, puts a register exactly after the match if it is LUT based
@param bit_feed_size = number of bits being feed in each cycle
@param lut_bram_dic = a dictionary to specify put matching in LUT or BRAM. key: node, value: a tuple of 1,2...
        1 means LUT, 2 means BRAM. if a node does not exist in this dictionary, LUT will be used for matching for all
        dimensions by default
#}

/*
{{get_summary(automata)}}
*/

{% for node in automata.nodes  if not node.id == 0 and node.id not in bram_match_dictionary %} {# 0 is the default id of fake root#}
{{lut_match.LUT_match( automata.id +'_'+node.id|string, node.symbols, before_match_reg, after_match_reg, bit_feed_size//automata.stride_value, node in lut_bram_dic, lut_bram_dic.get(node, None))}}
{% endfor %}

module Automata_{{automata.id}}(input clk,
           input run,
           input reset,
           input [{{bit_feed_size - 1}} : 0] symbols
           {% for node, placement in lut_bram_dic.iteritems() -%}
               {% for d in placement -%}
                    {% if d == 2 %}
                    , input {{automata.id}}_n{{node.id}}_d{{loop.index0}}_bram
                    {% endif %}
               {%- endfor %}
           {%- endfor -%}
           {%for node in automata.nodes if node.report%}
           , output {{automata.id}}_w_out_{{node.id}}
           {%- endfor -%}
           );

wire all_input;
wire start_of_data;

{%for node in automata.nodes  if not node.id == 0 %}
{%- if not node.report -%}
wire {{automata.id}}_w_out_{{node.id}};
{% endif -%}
wire {{automata.id}}_lut_match_{{node.id}};
wire {{automata.id}}_w_match_{{node.id}};
{% endfor %}

assign all_input = 1'b1;
assign start_of_data = ~reset;

{%for node in automata.nodes  if not node.id == 0 %}

    {% set n_preds = predecessors(automata._my_graph, node)|list%}
    {%set pred_wire_str = []%}
    {% for p in n_preds %}
        {%- if p.id != 0 -%}
            {% do pred_wire_str.append( automata.id|string +'_w_out_' + p.id|string) %}
        {%- elif node.start_type|string == 'StartType.start_of_data' -%}
            {% do pred_wire_str.append('start_of_data') %}
        {%- else -%} {# all start case #}
            {% do pred_wire_str.append('all_input') %}
        {%- endif -%}
    {% endfor %}

LUT_Match_{{automata.id}}_{{node.id}} #({{bit_feed_size}}) lut_match_{{automata.id}}_{{node.id}}(
                .clk(clk),
                .symbols(symbols),
                .match({{automata.id}}_lut_match_{{node.id}}));


assign {{automata.id}}_w_match_{{node.id}} = {{automata.id}}_lut_match_{{node.id}} {% for d in lut_bram_dic[node] %} {% if d == 2 %} & {{automata.id}}_n{{node.id}}_d{{loop.index0}}_bram {% endif %}{% endfor %};

STE #({{n_preds|length}}) {{automata.id}}_ste_{{node.id}} (
                .clk(clk),
                .run(run),
                .reset(reset),
                .income_edges({ {{pred_wire_str|join(', ')}} }),
                .match({{automata.id}}_w_match_{{node.id}}) ,
                .active_state({{automata.id}}_w_out_{{node.id}}));
{% endfor %}

endmodule
{% endmacro %}

