{% import 'LUT_match.template' as lut_match %}

{%macro automata_macro(automata, capture_symbol ) -%}

/*
{{get_summary(automata)}}
*/

{% for node in automata.nodes  if not node.id == 0 %} {# 0 is the default id of fake root#}
{{lut_match.LUT_match( automata.id +'_'+node.id|string, node.symbols)}}
{% endfor %}


module Automata_{{automata.id}}(input clk,
           input run,
           input reset,
           input [{{automata.stride_value * 8 - 1}} : 0] symbols
           {%for node in automata.nodes if node.report%}
           , output {{automata.id}}_w_out_{{node.id}}
           {%- endfor -%}
           );

reg prev_reset;
wire start_of_data;

always @(posedge clk)
begin
    prev_reset <= reset;
end

assign start_of_data = prev_reset & ~reset;



{% for node in automata.nodes  if not node.id == 0 %} {# 0 is the default id of fake root#}
{%- if not node.report -%}
wire {{automata.id}}_w_out_{{node.id}};
{%- endif -%}
wire {{automata.id}}_w_match_{{node.id}};
{% endfor %}

{%for node in automata.nodes  if not node.id == 0 %}
    {% set n_preds = predecessors(automata._my_graph, node)|list%}
    {%set pred_wire_str = []%}
    {% for p in n_preds %}
        {%- if p.id != 0 -%}
            {% do pred_wire_str.append( automata.id|string +'_w_out_' + p.id|string) %}
        {%- elif p.start_type|string == 'StartType.start_of_data' -%}
            {% do pred_wire_str.append('~reset') %}
        {%- else -%} {# all start case #}
            {% do pred_wire_str.append('start_of_data') %}
        {%- endif -%}
    {% endfor %}

LUT_Match_{{automata.id}}_{{node.id}} #({{automata.stride_value * 8}}) lut_match_{{automata.id}}_{{node.id}}(
                .clk(clk),
                .symbols(symbols),
                .match({% if not capture_symbol -%}
                        {{automata.id}}_w_match_{{node.id}}
                        {%- endif -%}
                ),
                .new_match(
                {%- if capture_symbol -%}
                {{automata.id}}_w_match_{{node.id}} {% endif %})
                );

STE #({{n_preds|length}}) {{automata.id}}_ste_{{node.id}} (
                .clk(clk),
                .run(run),
                .reset(reset),
                .income_edges({ {{pred_wire_str|join(', ')}} }),
                .match({{automata.id}}_w_match_{{node.id}}),
                .active_state({{automata.id}}_w_out_{{node.id}}));
{% endfor %}

endmodule
{% endmacro%}

