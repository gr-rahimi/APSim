{#
This template generate the top level module for the whole automaton
@param report_packet_width_list: a list of integers specifying number of bytes in each stage report packet. A packet
contains both the index metadata and report bit-vector
@param report_buffer_length: a list of integers specifying number of rows in each buffer
@param intconn_info_list: a list of lists of integers and a list of list of integers . Each internal list has three integers. The first one is the slave side
bits counts and the next integer is the number of instances  of that interconnect. The third integer is the burst size.
The fourth argument is a gain a list of list of integers. each internal list, specifies the index of previous layer
intercon to be conected to
@param lite_intconn_info: a list of lists. The internal lists have 2 items. The first item is an integer specifying the number of AXI interconnects for each layer of hierarchy.
the second item is a list of integers which specify the index of the previous layers.
@param report_axi_clk_freq: frequency of axi interconnect, DMA, Width converter and FIFO in MHz
@param autoamta_clock_freq: frequency of automata processor in MHz
#}

#create_project -force project_1 ./ -part xcvu9p-flga2104-2L-e
#set_property board_part xilinx.com:vcu118:part0:2.3 [current_project]

# create block design file
create_bd_design "report_architecture_bd"
update_compile_order -fileset sources_1

# Create dual clock buffers for each stage.
{% for rep_sze in report_packet_width_list %}

# generating AXI FIFOs
create_bd_cell -type ip -vlnv xilinx.com:ip:axis_data_fifo:2.0 axi_report_fifo_stage_{{loop.index0}}
set_property -dict [list CONFIG.TDATA_NUM_BYTES.VALUE_SRC USER] [get_bd_cells axi_report_fifo_stage_{{loop.index0}}]
set_property -dict [list CONFIG.TDATA_NUM_BYTES {{ '{' }}{{rep_sze}}{{ '}' }} CONFIG.FIFO_DEPTH {{ '{' }}{{report_buffer_length[loop.index0]}}{{ '}' }} CONFIG.IS_ACLK_ASYNC {1} CONFIG.HAS_RD_DATA_COUNT {1}] [get_bd_cells axi_report_fifo_stage_{{loop.index0}}]
#enable almost full for the fifo
set_property -dict [list CONFIG.HAS_AFULL {1}] [get_bd_cells axi_report_fifo_stage_{{loop.index0}}]

#generating AXI stream interface for fifos. This will be connected to the report states directly
create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:axis_rtl:1.0 input_report_AXIS_stage_{{loop.index0}}
set_property CONFIG.TDATA_NUM_BYTES [get_property CONFIG.TDATA_NUM_BYTES [get_bd_intf_pins axi_report_fifo_stage_{{loop.index0}}/S_AXIS]] [get_bd_intf_ports input_report_AXIS_stage_{{loop.index0}}]
connect_bd_intf_net [get_bd_intf_pins axi_report_fifo_stage_{{loop.index0}}/S_AXIS] [get_bd_intf_ports input_report_AXIS_stage_{{loop.index0}}]

#generating almost full port
create_bd_port -dir O almost_full_stage_{{loop.index0}}
connect_bd_net [get_bd_pins axi_report_fifo_stage_{{loop.index0}}/almost_full] [get_bd_ports almost_full_stage_{{loop.index0}}]

# generate AXI GPIO for buffer capacity and connect the capacity to the gpio
create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio:2.0 axi_gpio_buff_cap_stage_{{loop.index0}}
set_property -dict [list CONFIG.C_IS_DUAL {0} CONFIG.C_ALL_INPUTS {1} CONFIG.C_ALL_OUTPUTS {0}] [get_bd_cells axi_gpio_buff_cap_stage_{{loop.index0}}]
connect_bd_net [get_bd_pins axi_report_fifo_stage_{{loop.index0}}/axis_rd_data_count] [get_bd_pins axi_gpio_buff_cap_stage_{{loop.index0}}/gpio_io_i]

# generate DMA block
create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma:7.1 axi_dma_stage_{{loop.index0}}
set_property -dict [list CONFIG.c_include_sg {0} CONFIG.c_sg_include_stscntrl_strm {0} CONFIG.c_include_mm2s {0}] [get_bd_cells axi_dma_stage_{{loop.index0}}]
# setting the width of buffer length register
set_property -dict [list CONFIG.c_sg_length_width {18}] [get_bd_cells axi_dma_stage_{{loop.index0}}]
set_property -dict [list CONFIG.c_s_axis_s2mm_tdata_width.VALUE_SRC USER CONFIG.c_m_axi_s2mm_data_width.VALUE_SRC USER] [get_bd_cells axi_dma_stage_{{loop.index0}}]
# set the MM side width
set_property -dict [list CONFIG.c_m_axi_s2mm_data_width {{ '{' }}{{intconn_info_list[0][0]}}{{ '}'}}] [get_bd_cells axi_dma_stage_{{loop.index0}}]
# set the MM burst size
set_property -dict [list CONFIG.c_s2mm_burst_size {{ '{' }}{{intconn_info_list[0][2]}}{{ '}'}}] [get_bd_cells axi_dma_stage_{{loop.index0}}]

{% if intconn_info_list[0][0] != report_packet_width_list[loop.index0] %}
# generate the stream width converter
create_bd_cell -type ip -vlnv xilinx.com:ip:axis_dwidth_converter:1.1 fifo_to_dma_axis_w_conv_stage_{{loop.index0}}
set_property -dict [list CONFIG.S_TDATA_NUM_BYTES.VALUE_SRC USER] [get_bd_cells fifo_to_dma_axis_w_conv_stage_{{loop.index0}}]
set_property -dict [list CONFIG.S_TDATA_NUM_BYTES {{ '{' }}{{report_packet_width_list[loop.index0]}}{{ '}' }} CONFIG.M_TDATA_NUM_BYTES {{ '{' }}{{intconn_info_list[0][0] / 8}}{{ '}' }} CONFIG.HAS_MI_TKEEP {1}] [get_bd_cells fifo_to_dma_axis_w_conv_stage_{{loop.index0}}]
connect_bd_intf_net [get_bd_intf_pins axi_report_fifo_stage_{{loop.index0}}/M_AXIS] [get_bd_intf_pins fifo_to_dma_axis_w_conv_stage_{{loop.index0}}/S_AXIS]
connect_bd_intf_net [get_bd_intf_pins fifo_to_dma_axis_w_conv_stage_{{loop.index0}}/M_AXIS] [get_bd_intf_pins axi_dma_stage_{{loop.index0}}/S_AXIS_S2MM]
{%endif%}
{% endfor %}

{#
#####generating hierarchy of interconnects
#}

{% for i_con_info in intconn_info_list %}
{% set i_con_info_loop = loop %}
{% for i_con_inx in range(i_con_info[1]) %}
create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}
set_property -dict [list CONFIG.ENABLE_ADVANCED_OPTIONS {1}] [get_bd_cells report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}]
set_property -dict [list CONFIG.NUM_SI {{ '{'}}{{i_con_info[3][loop.index0]|length}}{{'}'}} CONFIG.NUM_MI {1}] [get_bd_cells report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}]
# add register slice to master and slaves
set_property -dict [list CONFIG.M00_HAS_REGSLICE {3} {% for _ in range(i_con_info[3][loop.index0]|length) %}CONFIG.S{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_HAS_REGSLICE {3} {% endfor %}] [get_bd_cells report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}]
# set buffer size for master and slave ports
set_property -dict [list CONFIG.M00_HAS_DATA_FIFO {1} {% for _ in range(i_con_info[3][loop.index0]|length) %}CONFIG.S{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_HAS_DATA_FIFO {1} {% endfor %}] [get_bd_cells report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}]

{% set curr_intc_idx_loop = loop %}
{% for slave_idx in i_con_info[3][curr_intc_idx_loop.index0] %}
{% if i_con_info_loop.index0 == 0 %}
connect_bd_intf_net [get_bd_intf_pins axi_dma_stage_{{slave_idx}}/M_AXI_S2MM] -boundary_type upper [get_bd_intf_pins report_axi_intc_level_0_idx_{{curr_intc_idx_loop.index0}}/{% if loop.index0<10 %}S0{{loop.index0}}{% else %}S{{loop.index0}}{% endif %}_AXI]
{% else %}
connect_bd_intf_net -boundary_type upper [get_bd_intf_pins report_axi_intc_level_{{i_con_info_loop.index0 - 1}}_idx_{{slave_idx}}/M00_AXI] [get_bd_intf_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{curr_intc_idx_loop.index0}}/{% if loop.index0<10 %}S0{{loop.index0}}{% else %}S{{loop.index0}}{% endif %}_AXI]
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}


# creating DDR memory controller
create_bd_cell -type ip -vlnv xilinx.com:ip:ddr4:2.2 ddr4_0
set_property -dict [list CONFIG.C0_CLOCK_BOARD_INTERFACE {default_250mhz_clk1} CONFIG.C0_DDR4_BOARD_INTERFACE {ddr4_sdram_c1} CONFIG.C0.DDR4_TimePeriod {833} CONFIG.C0.DDR4_InputClockPeriod {4000} CONFIG.C0.DDR4_CLKOUT0_DIVIDE {5} CONFIG.C0.DDR4_MemoryPart {MT40A256M16GE-083E} CONFIG.C0.DDR4_DataWidth {64} CONFIG.C0.DDR4_CasWriteLatency {12} CONFIG.C0.DDR4_AxiDataWidth {512} CONFIG.C0.DDR4_AxiAddressWidth {31} CONFIG.ADDN_UI_CLKOUT1_FREQ_HZ {100} CONFIG.C0.BANK_GROUP_WIDTH {1}] [get_bd_cells ddr4_0]
apply_bd_automation -rule xilinx.com:bd_rule:board -config { Board_Interface {ddr4_sdram_c1 ( DDR4 SDRAM C1 ) } Manual_Source {Auto}}  [get_bd_intf_pins ddr4_0/C0_DDR4]
apply_bd_automation -rule xilinx.com:bd_rule:board -config { Board_Interface {default_250mhz_clk1 ( 250 MHz System differential clock1 ) } Manual_Source {Auto}}  [get_bd_intf_pins ddr4_0/C0_SYS_CLK]

#connect the last interconnect master port to the DDR controller
connect_bd_intf_net -boundary_type upper [get_bd_intf_pins report_axi_intc_level_{{intconn_info_list|length - 1}}_idx_0/M00_AXI] [get_bd_intf_pins ddr4_0/C0_DDR4_S_AXI]

{#
#####generating hierarchy of interconnects for AXI-lite
#}

{% for ilite_con_info in lite_intconn_info %}
{% set ilite_con_info_loop = loop %}
{% for ilite_con_inx in range(ilite_con_info[0]) %}
create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}
set_property -dict [list CONFIG.ENABLE_ADVANCED_OPTIONS {1}] [get_bd_cells monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}]
{% if ilite_con_info_loop.index0 == 0 %} {# the first laevel needs also to connect the dma control port #}
set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {{ '{'}}{{(ilite_con_info[1][loop.index0]|length) * 2}}{{'}'}}] [get_bd_cells monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}]
{% else %}
set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {{ '{'}}{{ilite_con_info[1][loop.index0]|length}}{{'}'}}] [get_bd_cells monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}]
{% endif %}
# add register slice to master and slaves
set_property -dict [list CONFIG.S00_HAS_REGSLICE {3} {% for _ in range(ilite_con_info[1][loop.index0]|length) %}CONFIG.M{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_HAS_REGSLICE {3} {% endfor %}] [get_bd_cells monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}]
# set buffer size for master and slave ports
set_property -dict [list CONFIG.S00_HAS_DATA_FIFO {1} {% for _ in range(ilite_con_info[1][loop.index0]|length) %}CONFIG.M{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_HAS_DATA_FIFO {1} {% endfor %}] [get_bd_cells monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}]

{% set curr_intclite_idx_loop = loop %}
{% for master_idx in ilite_con_info[1][curr_intclite_idx_loop.index0] %}
{% if ilite_con_info_loop.index0 == 0 %}
connect_bd_intf_net [get_bd_intf_pins axi_gpio_buff_cap_stage_{{master_idx}}/S_AXI] -boundary_type upper [get_bd_intf_pins monitor_axilite_intc_level_0_idx_{{curr_intclite_idx_loop.index0}}/{% if loop.index0 * 2 < 10 %}M0{{loop.index0 * 2}}{% else %}M{{loop.index0 * 2}}{% endif %}_AXI]
connect_bd_intf_net [get_bd_intf_pins axi_dma_stage_{{master_idx}}/S_AXI_LITE] -boundary_type upper [get_bd_intf_pins monitor_axilite_intc_level_0_idx_{{curr_intclite_idx_loop.index0}}/{% if loop.index0 * 2 + 1 < 10 %}M0{{loop.index0 * 2 + 1}}{% else %}M{{loop.index0 * 2 + 1}}{% endif %}_AXI]
{% else %}
connect_bd_intf_net -boundary_type upper [get_bd_intf_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0 - 1}}_idx_{{master_idx}}/S00_AXI] [get_bd_intf_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{curr_intclite_idx_loop.index0}}/{% if loop.index0<10 %}M0{{loop.index0}}{% else %}M{{loop.index0}}{% endif %}_AXI]
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

# MicroBlaze processor
create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:11.0 mb_processor
set_property -dict [list CONFIG.C_D_AXI {1} CONFIG.G_USE_EXCEPTIONS {0} CONFIG.C_ILL_OPCODE_EXCEPTION {0}] [get_bd_cells mb_processor]
apply_bd_automation -rule xilinx.com:bd_rule:microblaze -config { axi_intc {0} axi_periph {Enabled} cache {32KB} clk {New Clocking Wizard} debug_module {Debug Only} ecc {None} local_mem {8KB} preset {Application}}  [get_bd_cells mb_processor]
set_property -dict [list CONFIG.C_USE_ICACHE {0} CONFIG.C_ADDR_TAG_BITS {0} CONFIG.C_USE_DCACHE {0} CONFIG.C_DCACHE_ADDR_TAG {0}] [get_bd_cells mb_processor]

#connect the ddr 100MHz clk to the clock wizard
set_property -dict [list CONFIG.PRIM_SOURCE {Single_ended_clock_capable_pin}] [get_bd_cells clk_wiz_1]
connect_bd_net [get_bd_pins ddr4_0/addn_ui_clkout1] [get_bd_pins clk_wiz_1/clk_in1]
#generate the report flush (interconnect, FIFO, DMA, Width converter)
set_property -dict [list CONFIG.CLKOUT2_USED {true} CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {250} CONFIG.MMCM_CLKFBOUT_MULT_F {12.500} CONFIG.MMCM_CLKOUT0_DIVIDE_F {12.500} CONFIG.MMCM_CLKOUT1_DIVIDE {5} CONFIG.NUM_OUT_CLKS {2} CONFIG.CLKOUT1_JITTER {111.970} CONFIG.CLKOUT1_PHASE_ERROR {84.520} CONFIG.CLKOUT2_JITTER {94.797} CONFIG.CLKOUT2_PHASE_ERROR {84.520}] [get_bd_cells clk_wiz_1]


# connect the ddr clock to the last interconnect master port and interconnect itself
connect_bd_net [get_bd_pins ddr4_0/c0_ddr4_ui_clk] [get_bd_pins report_axi_intc_level_{{intconn_info_list|length - 1}}_idx_0/M00_ACLK]
connect_bd_net [get_bd_pins report_axi_intc_level_{{intconn_info_list|length - 1}}_idx_0/ACLK] [get_bd_pins clk_wiz_1/clk_out2]

#AXI lite clk connection and reset
{% for ilite_con_info in lite_intconn_info %}
{% set ilite_con_info_loop = loop %}
{% for ilite_con_inx in range(ilite_con_info[0]) %}
connect_bd_net [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}/ACLK]
connect_bd_net [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}/S00_ACLK]
connect_bd_net [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}/ARESETN] [get_bd_pins rst_clk_wiz_1_100M/interconnect_aresetn]
connect_bd_net [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{loop.index0}}/S00_ARESETN]
{% set curr_intclite_idx_loop = loop %}
{% for master_idx in ilite_con_info[1][curr_intclite_idx_loop.index0] %}
connect_bd_net [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{curr_intclite_idx_loop.index0}}/M{% if loop.index0 < 10%}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_ACLK]
connect_bd_net [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{curr_intclite_idx_loop.index0}}/M{% if loop.index0 < 10%}0{{loop.index0}}{% else %}{{loop.index0}}{% endif %}_ARESETN]
{% if ilite_con_info_loop.index0 == 0 %}
connect_bd_net [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{curr_intclite_idx_loop.index0}}/M{% if loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length < 10%}0{{loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length }}{% else %}{{loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length }}{% endif %}_ACLK]
connect_bd_net [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn] [get_bd_pins monitor_axilite_intc_level_{{ilite_con_info_loop.index0}}_idx_{{curr_intclite_idx_loop.index0}}/M{% if loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length < 10%}0{{loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length}}{% else %}{{loop.index0 + ilite_con_info[1][curr_intclite_idx_loop.index0]|length}}{% endif %}_ARESETN]
{% endif %}

{% if ilite_con_info_loop.index0 == 0 %}
connect_bd_net [get_bd_pins axi_gpio_buff_cap_stage_{{master_idx}}/s_axi_aclk] [get_bd_pins clk_wiz_1/clk_out1]
connect_bd_net [get_bd_pins axi_gpio_buff_cap_stage_{{master_idx}}/s_axi_aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

#connect the last interconnect of AXI lite to ht MicroBlaze
connect_bd_intf_net -boundary_type upper [get_bd_intf_pins monitor_axilite_intc_level_{{lite_intconn_info|length - 1}}_idx_0/S00_AXI] [get_bd_intf_pins mb_processor/M_AXI_DP]

# create the frequency port for slave port of the fifos
create_bd_port -dir I -type clk -freq_hz {{autoamta_clock_freq * 1000000}} clk_fifo_slave

#connecting the dma control registers clock to the processor clock and reset for dma fifo and width converter (if exist)
{% for dma_idx in range(report_packet_width_list|length) %}
connect_bd_net [get_bd_pins clk_wiz_1/clk_out1] [get_bd_pins axi_dma_stage_{{loop.index0}}/s_axi_lite_aclk]
connect_bd_net [get_bd_pins clk_wiz_1/clk_out2] [get_bd_pins axi_dma_stage_{{loop.index0}}/m_axi_s2mm_aclk]
connect_bd_net [get_bd_pins axi_report_fifo_stage_{{loop.index0}}/s_axis_aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
connect_bd_net [get_bd_ports clk_fifo_slave] [get_bd_pins axi_report_fifo_stage_{{loop.index0}}/s_axis_aclk]
connect_bd_net [get_bd_pins clk_wiz_1/clk_out2] [get_bd_pins axi_report_fifo_stage_{{loop.index0}}/m_axis_aclk]
{% if intconn_info_list[0][0] != report_packet_width_list[loop.index0] %} connect_bd_net [get_bd_pins fifo_to_dma_axis_w_conv_stage_{{loop.index0}}/aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
connect_bd_net [get_bd_pins fifo_to_dma_axis_w_conv_stage_{{loop.index0}}/aclk] [get_bd_pins clk_wiz_1/clk_out2]
 {% endif %}
connect_bd_net [get_bd_pins axi_dma_stage_{{loop.index0}}/axi_resetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
{% endfor %}

# connecting reset signal of report interconnect to the processor reset signal
{% for i_con_info in intconn_info_list %}
{% set i_con_info_loop = loop %}
{% for i_con_inx in range(i_con_info[1]) %}
connect_bd_net [get_bd_pins rst_clk_wiz_1_100M/interconnect_aresetn] [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}/ARESETN]
connect_bd_net [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}/M00_ARESETN] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
{% if i_con_info_loop.index < intconn_info_list|length %}
connect_bd_net [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}/ACLK] [get_bd_pins clk_wiz_1/clk_out2]
connect_bd_net [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{loop.index0}}/M00_ACLK] [get_bd_pins clk_wiz_1/clk_out2]
{% endif %}
{% set curr_intc_idx_loop = loop %}
{% for slave_idx in i_con_info[3][curr_intc_idx_loop.index0] %}
connect_bd_net [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{curr_intc_idx_loop.index0}}/S{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}loop.index0{% endif %}_ARESETN] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
connect_bd_net [get_bd_pins report_axi_intc_level_{{i_con_info_loop.index0}}_idx_{{curr_intc_idx_loop.index0}}/S{% if loop.index0 < 10 %}0{{loop.index0}}{% else %}loop.index0{% endif %}_ACLK] [get_bd_pins clk_wiz_1/clk_out2]
{% endfor %}
{% endfor %}
{% endfor %}

# create reset port
create_bd_port -dir I -type rst sys_rst
set_property CONFIG.POLARITY ACTIVE_HIGH [get_bd_ports sys_rst]
connect_bd_net [get_bd_ports sys_rst] [get_bd_pins rst_clk_wiz_1_100M/ext_reset_in]
connect_bd_net [get_bd_ports sys_rst] [get_bd_pins ddr4_0/sys_rst]
connect_bd_net [get_bd_pins ddr4_0/c0_ddr4_aresetn] [get_bd_pins rst_clk_wiz_1_100M/peripheral_aresetn]
connect_bd_net [get_bd_ports sys_rst] [get_bd_pins clk_wiz_1/reset]

# auto assign address
assign_bd_address


make_wrapper -files [get_files ./project_1.srcs/sources_1/bd/report_architecture_bd/report_architecture_bd.bd] -top
add_files -norecurse ./project_1.srcs/sources_1/bd/report_architecture_bd/hdl/report_architecture_bd_wrapper.v
update_compile_order -fileset sources_1

generate_target all [get_files  ./project_1.srcs/sources_1/bd/report_architecture_bd/report_architecture_bd.bd]

export_ip_user_files -of_objects [get_files ./project_1.srcs/sources_1/bd/report_architecture_bd/report_architecture_bd.bd] -no_script -sync -force -quiet
create_ip_run [get_files -of_objects [get_fileset sources_1] ./project_1.srcs/sources_1/bd/report_architecture_bd/report_architecture_bd.bd]
update_compile_order -fileset sources_1

set ip_names [glob -dir ./project_1.srcs/sources_1/bd/report_architecture_bd/ip -tail *]
foreach bd_ip $ip_names { catch { config_ip_cache -export [get_ips -all $bd_ip] } }
set synth_total_str ""
set synth_suffix _synth_1
foreach bd_ip $ip_names { set synth_total_str [concat $synth_total_str $bd_ip$synth_suffix] }

launch_runs -jobs 8 $synth_total_str

foreach bd_ip $ip_names { catch { wait_on_run $bd_ip$synth_suffix } }

update_compile_order -fileset sources_1





