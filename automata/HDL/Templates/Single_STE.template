{% import 'STE_base.template' as ste_base %}
{#
@param ste_type: an integer specifying the model of the STE. if 1, it will be exactly the same as MICRON AP design. In this case,
a FF will store a 1 if it has been detected as an potential active state. and the final match can be calculated by doing AND
operation over using the output of this FF and matching signal of the next cycle. In the other design (=2) where the FF captures the
actual state value. Basically, it store a one if its parent was activated previous cycle and current symbol matches the matching condition.
@param use_rst: True/False. If True, design will use the reset signal to reset the STE's FF. If False, the reset signal  will not be used and we assume
that the reset can be generated by entering a symbol that will not be matched agioanst any STE. For example, If BAM is used, we can use
the rest of the bram rows (half) and store zero there. Whenever we want to reset the automata, we can symply insert a symbol in that region and the automta will be set to zero as the out
put of matching is 0.

#}
{{ste_base.ste(ste_type, use_rst)}}

